{
  "_args": [
    [
      {
        "raw": "https://github.com/phonegap/phonegap-mobile-accessibility.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/phonegap/phonegap-mobile-accessibility.git",
        "spec": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:phonegap/phonegap-mobile-accessibility.git",
          "sshUrl": "git+ssh://git@github.com/phonegap/phonegap-mobile-accessibility.git",
          "httpsUrl": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git",
          "gitUrl": "git://github.com/phonegap/phonegap-mobile-accessibility.git",
          "shortcut": "github:phonegap/phonegap-mobile-accessibility",
          "directUrl": "https://raw.githubusercontent.com/phonegap/phonegap-mobile-accessibility/master/package.json"
        }
      },
      "C:\\Users\\My DELL\\Documents\\PhoneGap\\CameraExample\\node_modules"
    ]
  ],
  "_from": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git",
  "_id": "phonegap-plugin-mobile-accessibility@1.0.5",
  "_inCache": true,
  "_location": "/phonegap-plugin-mobile-accessibility",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/phonegap/phonegap-mobile-accessibility.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/phonegap/phonegap-mobile-accessibility.git",
    "spec": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:phonegap/phonegap-mobile-accessibility.git",
      "sshUrl": "git+ssh://git@github.com/phonegap/phonegap-mobile-accessibility.git",
      "httpsUrl": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git",
      "gitUrl": "git://github.com/phonegap/phonegap-mobile-accessibility.git",
      "shortcut": "github:phonegap/phonegap-mobile-accessibility",
      "directUrl": "https://raw.githubusercontent.com/phonegap/phonegap-mobile-accessibility/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git#e9821054c38fb203c3fe632bd7bbaa02ca56e544",
  "_shasum": "0c844c160eec9ec7014ce4105aec12a7becfe3d8",
  "_shrinkwrap": null,
  "_spec": "https://github.com/phonegap/phonegap-mobile-accessibility.git",
  "_where": "C:\\Users\\My DELL\\Documents\\PhoneGap\\CameraExample\\node_modules",
  "author": {
    "name": "Adobe PhoneGap Team"
  },
  "bugs": {
    "url": "https://github.com/phonegap/phonegap-mobile-accessibility/issues"
  },
  "cordova": {
    "id": "phonegap-plugin-mobile-accessibility",
    "platforms": [
      "ios",
      "android",
      "windows"
    ]
  },
  "dependencies": {},
  "description": "PhoneGap Mobile Accessibility Plugin",
  "devDependencies": {},
  "engines": [
    {
      "name": "cordova",
      "version": ">=3.0.0"
    }
  ],
  "gitHead": "e9821054c38fb203c3fe632bd7bbaa02ca56e544",
  "homepage": "http://github.com/phonegap/phonegap-mobile-accessibility#readme",
  "keywords": [
    "phonegap",
    "mobile accessibility",
    "ecosystem:cordova",
    "cordova-ios",
    "cordova-android",
    "cordova-windows"
  ],
  "license": "Apache 2.0",
  "name": "phonegap-plugin-mobile-accessibility",
  "optionalDependencies": {},
  "readme": "# phonegap-plugin-mobile-accessibility\r\n==========================================\r\n\r\nThis plugin exposes information on the status of various accessibility features of mobile operating systems, including, for example, whether a screen reader is running, invert colors is enabled, and the preferred scaling for text. It also allows an application to send a string to be spoken by the screen reader, or a command to stop the screen reader from speaking.\r\n\r\n---------------\r\n## Installation\r\n\r\n    $ cordova plugin add https://github.com/phonegap/phonegap-mobile-accessibility.git\r\n\r\n----------------------\r\n## Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n----------------------\r\n## MobileAccessibility\r\n\r\nThe `MobileAccessibility` object, exposed by `window.MobileAccessibility`, provides methods for determining the status of accessibility features active on the user's device, methods changing the text zoom of the Cordova web view and for using the user's preferred text zoom as set in the operating system settings, and methods for sending a string to be spoken by the screen reader or to stop the screen reader from speaking.\r\n\r\n-----------\r\n### Methods\r\n\r\n- MobileAccessibility.isScreenReaderRunning\r\n- MobileAccessibility.isVoiceOverRunning\r\n- MobileAccessibility.isTalkBackRunning\r\n- MobileAccessibility.isChromeVoxActive\r\n- MobileAccessibility.isClosedCaptioningEnabled\r\n- MobileAccessibility.isGuidedAccessEnabled\r\n- MobileAccessibility.isInvertColorsEnabled\r\n- MobileAccessibility.isMonoAudioEnabled\r\n- MobileAccessibility.isReduceMotionEnabled\r\n- MobileAccessibility.isTouchExplorationEnabled\r\n- MobileAccessibility.getTextZoom\r\n- MobileAccessibility.setTextZoom\r\n- MobileAccessibility.updateTextZoom\r\n- MobileAccessibility.usePreferredTextZoom\r\n- MobileAccessibility.postNotification\r\n- MobileAccessibility.speak\r\n- MobileAccessibility.stop\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isScreenReaderRunning(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if a screen reader is running.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isScreenReaderRunningCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Screen reader: ON\");\r\n            // Do something to improve the behavior of the application while a screen reader is active.\r\n        } else {\r\n            console.log(\"Screen reader: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isScreenReaderRunning(isScreenReaderRunningCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n-----------------------------------------------------\r\n#### MobileAccessibility.isVoiceOverRunning(callback)\r\n\r\n\r\nAn iOS-specific proxy for the `MobileAccessibility.isScreenReaderRunning` method. This method will return `false` on Android and Amazon Fire OS.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isVoiceOverRunningCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Screen reader: ON\");\r\n            // Do something to improve the behavior of the application while a screen reader is active.\r\n        } else {\r\n            console.log(\"Screen reader: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isVoiceOverRunning(isVoiceOverRunningCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isTalkBackRunning(callback)\r\n\r\n\r\nAn Android/Amazon Fire OS-specific proxy for the `MobileAccessibility.isScreenReaderRunning` method. This method will return `false` on iOS.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isTalkBackRunningCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Screen reader: ON\");\r\n            // Do something to improve the behavior of the application while a screen reader is active.\r\n        } else {\r\n            console.log(\"Screen reader: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isTalkBackRunning(isTalkBackRunningCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isChromeVoxActive()\r\n\r\n\r\nOn Android, this method returns `true` if ChromeVox is active and properly initialized with access to the text to speech API in the WebView.\r\nIf TalkBack is running but ChromeVox is not active, this method is useful to alert the user of a potential problem.\r\n\r\n##### Returns\r\n\r\n- __boolean__ (Boolean) Returns `true` if ChromeVox is active and properly initialized with access to the text to speech API in the WebView.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    MobileAccessibility.isTalkBackRunning(\r\n        function (bool) {\r\n            console.log('Talkback status: ' + bool);\r\n            if (bool) {\r\n                /* Use setTimeout to account for latency in initialization of ChromeVox */\r\n                setTimeout(function() {\r\n                    if (MobileAccessibility.isChromeVoxActive()) {\r\n                        console.log('ChromeVox is active.');\r\n                    } else {\r\n                        console.log('ChromeVox is not active.');\r\n\r\n                        /* Notify the user of a potential problem */\r\n                        MobileAccessibility.speak('The ChromeVox screen reader has failed to initialize. You may wish to close and restart this app.');\r\n                    }\r\n                }, 5000);\r\n            }\r\n        });\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isBoldTextEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if Bold Text is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isBoldTextEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Bold Text: ON\");\r\n            // Do something to improve the behavior of the application while Bold Text is enabled.\r\n        } else {\r\n            console.log(\"Bold Text: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isBoldTextEnabled(isBoldTextEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n------------------------------------------------------------\r\n#### MobileAccessibility.isClosedCaptioningEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if system-level closed captioning is enabled on the device.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isClosedCaptioningEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Closed Captioning: ON\");\r\n            // Do something to improve the behavior of the application while closed captioning is enabled.\r\n        } else {\r\n            console.log(\"Closed Captioning: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isClosedCaptioningEnabled(isClosedCaptioningEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isDarkerSystemColorsEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if Darker System Colors is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isDarkerSystemColorsEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Darker System Colors: ON\");\r\n            // Do something to improve the behavior of the application while Darker System Colors is enabled.\r\n        } else {\r\n            console.log(\"Darker System Colors: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isDarkerSystemColorsEnabled(isDarkerSystemColorsEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isGrayscaleEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if Grayscale is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isGrayscaleEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Grayscale: ON\");\r\n            // Do something to improve the behavior of the application while Grayscale is enabled.\r\n        } else {\r\n            console.log(\"Grayscale: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isGrayscaleEnabled(isGrayscaleEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isGuidedAccessEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if Guided Access is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isGuidedAccessEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Guided Access: ON\");\r\n            // Do something to improve the behavior of the application while Guided Access is enabled.\r\n        } else {\r\n            console.log(\"Guided Access: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isGuidedAccessEnabledEnabled(isGuidedAccessEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.isInvertColorsEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if the display colors have been inverted.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isInvertColorsEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Invert Colors: ON\");\r\n            // Do something to improve the behavior of the application while Invert Colors is enabled.\r\n        } else {\r\n            console.log(\"Invert Colors: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isInvertColorsEnabled(isInvertColorsEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n-----------------------------------------------------\r\n#### MobileAccessibility.isMonoAudioEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if mono audio is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isMonoAudioEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Mono Audio: ON\");\r\n            // Do something to improve the behavior of the application while Mono Audio is enabled.\r\n        } else {\r\n            console.log(\"Mono Audio: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isMonoAudioEnabled(isMonoAudioEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isReduceMotionEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if reduce motion is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isReduceMotionEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Reduce Motion: ON\");\r\n            // Do something to improve the behavior of the application when reduce motion is enabled.\r\n        } else {\r\n            console.log(\"Reduce Motion: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isReduceMotionEnabled(isReduceMotionEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isReduceTransparencyEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if reduce transparency is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isReduceTransparencyEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Reduce Transparency: ON\");\r\n            // Do something to improve the behavior of the application when reduce transparency is enabled.\r\n        } else {\r\n            console.log(\"Reduce Transparency: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isReduceTransparencyEnabled(isReduceTransparencyEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isSpeakScreenEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if speak screen is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isSpeakScreenEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Speak Screen: ON\");\r\n            // Do something to improve the behavior of the application when Speak Screen is enabled.\r\n        } else {\r\n            console.log(\"Speak Screen: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isSpeakScreenEnabled(isSpeakScreenEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isSpeakSelectionEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if speak selection is enabled.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isSpeakSelectionEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Speak Selection: ON\");\r\n            // Do something to improve the behavior of the application when Speak Selection is enabled.\r\n        } else {\r\n            console.log(\"Speak Selection: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isSpeakSelectionEnabled(isSpeakSelectionEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n----------------------------------------------------\r\n#### MobileAccessibility.isSwitchControlRunning(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if switch control is running.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isSwitchControlRunningCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Switch Control: ON\");\r\n            // Do something to improve the behavior of the application when Switch Control is running.\r\n        } else {\r\n            console.log(\"Switch Control: OFF\");\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isSwitchControlRunning(isSwitchControlRunningCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n------------------------------------------------------------\r\n#### MobileAccessibility.isTouchExplorationEnabled(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to determine if Touch Exploration is enabled on Android.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the boolean result asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function isTouchExplorationEnabledCallback(boolean) {\r\n        if (boolean) {\r\n            console.log(\"Touch Exploration: ON\");\r\n            // Do something to improve the behavior of the application with Touch Exploration enabled.\r\n        } else {\r\n            console.log(\"Touch Exploration: OFF\");\r\n            // Do something to improve the behavior of the application with Touch Exploration disabled.\r\n\r\n        }\r\n    }\r\n\r\n    MobileAccessibility.isTouchExplorationEnabled(isTouchExplorationEnabledCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.getTextZoom(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to return the current text zoom percent value for the WebView.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the text zoom percent value asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function getTextZoomCallback(textZoom) {\r\n        console.log('Current text zoom = ' + textZoom + '%')\r\n    }\r\n\r\n    MobileAccessibility.getTextZoom(getTextZoomCallback);\r\n```\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n--------------------------------------------------------\r\n#### MobileAccessibility.setTextZoom(textZoom, callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to set the current text zoom percent value for the WebView.\r\n\r\n##### Parameters\r\n\r\n- __textZoom__ (Number) A percentage value by which text in the WebView should be scaled.\r\n- __callback__ (Function) A callback method to receive the new text zoom percent value asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function setTextZoomCallback(textZoom) {\r\n        console.log('WebView text should be scaled ' + textZoom + '%')\r\n    }\r\n\r\n    MobileAccessibility.setTextZoom(200, setTextZoomCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n-------------------------------------------------\r\n#### MobileAccessibility.updateTextZoom(callback)\r\n\r\nMakes an asynchronous call to native `MobileAccessibility` to retrieve the user's preferred text zoom from system settings and apply it to the application WebView.\r\n\r\n##### Parameters\r\n\r\n- __callback__ (Function) A callback method to receive the new text zoom percent value asynchronously from the native `MobileAccessibility` plugin.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    function updateTextZoomCallback(textZoom) {\r\n        console.log('WebView text should be scaled ' + textZoom + '%')\r\n    }\r\n\r\n    MobileAccessibility.updateTextZoom(callback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS7+\r\n\r\n------------------------------------------------------\r\n#### MobileAccessibility.usePreferredTextZoom(boolean)\r\n\r\nSpecifies whether or not the application should use the user's preferred text zoom from system settings to scale text within the WebView.\r\nWhen set to `true`, this method calls `MobileAccessibility.updateTextZoom()` to apply new text zoom settings to the application WebView. When set to `false`, the application WebView text zoom will be reset to the default value of `100` percent. The plugin uses local storage to retain the preference and will call `MobileAccessibility.updateTextZoom()` after a Cordova `resume` event.\r\n\r\n##### Parameters\r\n\r\n- __boolean__ (Boolean) A Boolean value which specifies whether to use the preferred text zoom of a default percent value of 100.\r\n\r\n##### Usage\r\n\r\n```javascript\r\n    MobileAccessibility.usePreferredTextZoom(true);\r\n\r\n    function getTextZoomCallback(textZoom) {\r\n        console.log('WebView text should be scaled to the preferred value ' + textZoom + '%')\r\n    }\r\n\r\n    MobileAccessibility.getTextZoom(getTextZoomCallback);\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS7+\r\n\r\n--------------------------------------------------------------------------------------------\r\n#### MobileAccessibility.postNotification(mobileAccessibilityNotification, string, callback)\r\n\r\nPosts a notification with a string for the screen reader to announce if it is running.\r\n\r\n##### Parameters\r\n\r\n- __mobileAccessibilityNotification__ (uint) A numeric constant for the type of notification to send. Constants are defined in `MobileAccessibilityNotifications`.\r\n- __string__ (string) A string to be announced by a screen reader.\r\n- __callback__ (function) A callback method to receive the asynchronous result from the native `MobileAccessibility`, when the announcement is finished, the function should expect an object containing the `stringValue` that was voiced and a boolean indicating that the announcement `wasSuccessful`.\r\n\r\n##### Constants\r\n\r\nThe following constants are for sending notifications to the accessibility API using the `MobileAccessibility.postNotification` method. They correspond to notification constants defined in [UIAccessibilityNotifications](https://developer.apple.com/library/ios/documentation/uikit/reference/UIAccessibility_Protocol/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008786-CH1-DontLinkElementID_3) on iOS.\r\n\r\n- MobileAccessibilityNotifications.SCREEN_CHANGED\r\n- MobileAccessibilityNotifications.LAYOUT_CHANGED\r\n- MobileAccessibilityNotifications.ANNOUNCEMENT\r\n- MobileAccessibilityNotifications.PAGE_SCROLLED\r\n\r\n```javascript\r\n    MobileAccessibility.postNotification(\r\n        MobileAccessibilityNotifications.ANNOUNCEMENT,\r\n        'String to be announced by screen reader.',\r\n        function(info) {\r\n            if (info) {\r\n                console.log(\"Screen Reader announced \\\"\" + info.stringValue + \"\\\" success : \" + info.wasSuccessful);\r\n            }\r\n        });\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- iOS\r\n\r\n-------------------------------------------------------------\r\n#### MobileAccessibility.speak(string, queueMode, properties)\r\n\r\n\r\nSpeaks a given string through the screenreader. On Android, if ChromeVox is active, it will use the specified queueMode and properties.\r\n\r\n##### Parameters\r\n\r\n- __string__ (string) A string to be announced by a screen reader.\r\n- __queueMode__ (Optional number) Valid modes are 0 for flush; 1 for queue.\r\n- __properties__ (Optional Object) Speech properties to use for this utterance.\r\n\r\n```javascript\r\n    MobileAccessibility.speak('This string will be announced when a screen reader is active on the device.');\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n-------------------------------\r\n#### MobileAccessibility.stop()\r\n\r\nStops speech.\r\n\r\n```javascript\r\n    MobileAccessibility.stop();\r\n```\r\n\r\n##### Supported Platforms\r\n\r\n- Amazon Fire OS\r\n- Android\r\n- iOS\r\n\r\n----------\r\n### Events\r\n\r\n--------------\r\n#### Constants\r\n\r\nThe following event constants are for `window` events, to which an application can listen for notification of changes in the status of the accessibility features on the device.\r\n\r\n- MobileAccessibilityNotifications.BOLD_TEXT_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.CLOSED_CAPTIONING_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.DARKER_SYSTEM_COLORS_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.GRAYSCALE_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.GUIDED_ACCESS_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.INVERT_COLORS_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.MONO_AUDIO_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.REDUCE_MOTION_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.REDUCE_TRANSPARENCY_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.SCREEN_READER_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.SPEAK_SCREEN_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.SPEAK_SELECTION_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.SWITCH_CONTROL_STATUS_CHANGED\r\n- MobileAccessibilityNotifications.TOUCH_EXPLORATION_STATUS_CHANGED\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.BOLD_TEXT_STATUS_CHANGED (boldtextstatuschanged)\r\n\r\nThe event fires when Bold Text has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Bold Text is active, `info.isBoldTextEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onBoldTextStatusChanged(info) {\r\n        if (info && typeof info.isBoldTextEnabled !== \"undefined\") {\r\n            if (info.isBoldTextEnabled) {\r\n                console.log(\"Bold Text: ON\");\r\n                // Do something to improve the behavior of the application while Bold Text is enabled.\r\n            } else {\r\n                console.log(\"Bold Text: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.BOLD_TEXT_STATUS_CHANGED, onBoldTextStatusChanged, false);\r\n```\r\n\r\n------------------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.CLOSED_CAPTIONING_STATUS_CHANGED (closedcaptioningstatuschanged)\r\n\r\nThe event fires when system-level closed captioning on the device turns on or off.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf closed captioning is active, `info.isClosedCaptioningEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onClosedCaptioningStatusChanged(info) {\r\n        if (info && typeof info.isClosedCaptioningEnabled !== \"undefined\") {\r\n            if (info.isClosedCaptioningEnabled) {\r\n                console.log(\"Closed Captioning: ON\");\r\n                // Do something to improve the behavior of the application while closed captioning is enabled.\r\n            } else {\r\n                console.log(\"Closed Captioning: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.CLOSED_CAPTIONING_STATUS_CHANGED, onClosedCaptioningStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.DARKER_SYSTEM_COLORS_STATUS_CHANGED (darkersystemcolorsstatuschanged)\r\n\r\nThe event fires when Darker System Colors has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Darker System Colors is active, `info.isDarkerSystemColorsEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onDarkerSystemColorsStatusChanged(info) {\r\n        if (info && typeof info.isDarkerSystemColorsEnabled !== \"undefined\") {\r\n            if (info.isDarkerSystemColorsEnabled) {\r\n                console.log(\"Darker System Colors: ON\");\r\n                // Do something to improve the behavior of the application while Darker System Colors is enabled.\r\n            } else {\r\n                console.log(\"Darker System Colors: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.DARKER_SYSTEM_COLORS_STATUS_CHANGED, onDarkerSystemColorsStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.GRAYSCALE_STATUS_CHANGED (grayscalestatuschanged)\r\n\r\nThe event fires when Grayscale has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Grayscale is active, `info.isGrayscaleEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onGrayscaleStatusChanged(info) {\r\n        if (info && typeof info.isGrayscaleEnabled !== \"undefined\") {\r\n            if (info.isGrayscaleEnabled) {\r\n                console.log(\"Grayscale: ON\");\r\n                // Do something to improve the behavior of the application while Grayscale is enabled.\r\n            } else {\r\n                console.log(\"Grayscale: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.GRAYSCALE_STATUS_CHANGED, onGrayscaleStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.GUIDED_ACCESS_STATUS_CHANGED (guidedaccessstatuschanged)\r\n\r\nThe event fires when Guided Access has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Guided Access is active, `info.isGuidedAccessEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onGuidedAccessStatusChanged(info) {\r\n        if (info && typeof info.isGuidedAccessEnabled !== \"undefined\") {\r\n            if (info.isGuidedAccessEnabled) {\r\n                console.log(\"Guided Access: ON\");\r\n                // Do something to improve the behavior of the application while Guided Access is enabled.\r\n            } else {\r\n                console.log(\"Guided Access: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.GUIDED_ACCESS_STATUS_CHANGED, onGuidedAccessStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.INVERT_COLORS_STATUS_CHANGED (invertcolorsstatuschanged)\r\n\r\nThe event fires when Invert Colors has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Invert Colors is active, `info.isInvertColorsEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onInvertColorsStatusChanged(info) {\r\n        if (info && typeof info.isInvertColorsEnabled !== \"undefined\") {\r\n            if (info.isInvertColorsEnabled) {\r\n                console.log(\"Invert Colors: ON\");\r\n                // Do something to improve the behavior of the application while Invert Colors is enabled.\r\n            } else {\r\n                console.log(\"Invert Colors: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.INVERT_COLORS_STATUS_CHANGED, onInvertColorsStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.MONO_AUDIO_STATUS_CHANGED (monoaudiostatuschanged)\r\n\r\nThe event fires when Mono Audio has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Mono Audio is active, `info.isMonoAudioEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onMonoAudioStatusChanged(info) {\r\n        if (info && typeof info.isMonoAudioEnabled !== \"undefined\") {\r\n            if (info.isMonoAudioEnabled) {\r\n                console.log(\"Mono Audio: ON\");\r\n                // Do something to improve the behavior of the application while Mono Audio is enabled.\r\n            } else {\r\n                console.log(\"Mono Audio: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.MONO_AUDIO_STATUS_CHANGED, onMonoAudioStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.REDUCE_MOTION_STATUS_CHANGED (reducemotionstatuschanged)\r\n\r\nThe event fires when Reduce Motion has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Reduce Motion is active, `info.isReduceMotionEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onReduceMotionStatusChanged(info) {\r\n        if (info && typeof info.isReduceMotionEnabled !== \"undefined\") {\r\n            if (info.isReduceMotionEnabled) {\r\n                console.log(\"Reduce Motion: ON\");\r\n                // Do something to improve the behavior of the application while Reduce Motion is enabled.\r\n            } else {\r\n                console.log(\"Reduce Motion: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.REDUCE_MOTION_STATUS_CHANGED, onMReduceMotionStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.REDUCE_TRANSPARENCY_STATUS_CHANGED (reducetransparencystatuschanged)\r\n\r\nThe event fires when Reduce Transparency has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Reduce Transparency is active, `info.isReduceTransparencyEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onReduceTransparencyStatusChanged(info) {\r\n        if (info && typeof info.isReduceTransparencyEnabled !== \"undefined\") {\r\n            if (info.isReduceTransparencyEnabled) {\r\n                console.log(\"Reduce Transparency: ON\");\r\n                // Do something to improve the behavior of the application while Reduce Transparency is enabled.\r\n            } else {\r\n                console.log(\"Reduce Transparency: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.REDUCE_TRANSPARENCY_STATUS_CHANGED, onReduceTransparencyStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.SCREEN_READER_STATUS_CHANGED (screenreaderstatuschanged)\r\n\r\nThe event fires when a screen reader on the device turns on or off.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf a screen reader is active, `info.isScreenReaderRunning` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onScreenReaderStatusChanged(info) {\r\n        if (info && typeof info.isScreenReaderRunning !== \"undefined\") {\r\n            if (info.isScreenReaderRunning) {\r\n                console.log(\"Screen reader: ON\");\r\n                // Do something to improve the behavior of the application while a screen reader is active.\r\n            } else {\r\n                console.log(\"Screen reader: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.SCREEN_READER_STATUS_CHANGED, onScreenReaderStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.SPEAK_SCREEN_STATUS_CHANGED (speakscreenstatuschanged)\r\n\r\nThe event fires when Speak Screen has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Speak Screen is active, `info.isSpeakScreenEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onSpeakScreenStatusChanged(info) {\r\n        if (info && typeof info.isSpeakScreenEnabled !== \"undefined\") {\r\n            if (info.isSpeakScreenEnabled) {\r\n                console.log(\"Speak Screen: ON\");\r\n                // Do something to improve the behavior of the application while Speak Screen is enabled.\r\n            } else {\r\n                console.log(\"Speak Screen: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.SPEAK_SCREEN_STATUS_CHANGED, onSpeakScreenStatusChanged, false);\r\n```\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.SPEAK_SELECTION_STATUS_CHANGED (speakselectionstatuschanged)\r\n\r\nThe event fires when Speak Selection has been enabled on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Speak Selection is active, `info.isSpeakSelectionEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onSpeakSelectionStatusChanged(info) {\r\n        if (info && typeof info.isSpeakSelectionEnabled !== \"undefined\") {\r\n            if (info.isSpeakSelectionEnabled) {\r\n                console.log(\"Speak Selection: ON\");\r\n                // Do something to improve the behavior of the application while Speak Selection is enabled.\r\n            } else {\r\n                console.log(\"Speak Selection: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.SPEAK_SELECTION_STATUS_CHANGED, onSpeakSelectionStatusChanged, false);\r\n```\r\n\r\n\r\n----------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.SWITCH_CONTROL_STATUS_CHANGED (switchcontrolstatuschanged)\r\n\r\nThe event fires when Switch Control is running on an iOS device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Switch Control is running, `info.isSwitchControlRunning` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onSwitchControlStatusChanged(info) {\r\n        if (info && typeof info.isSwitchControlRunning !== \"undefined\") {\r\n            if (info.isSwitchControlRunning) {\r\n                console.log(\"Switch Control: ON\");\r\n                // Do something to improve the behavior of the application while Switch Control is running.\r\n            } else {\r\n                console.log(\"Switch Control: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.SWITCH_CONTROL_STATUS_CHANGED, onSwitchControlStatusChanged, false);\r\n```\r\n\r\n------------------------------------------------------------------------------------------------------\r\n#### MobileAccessibilityNotifications.TOUCH_EXPLORATION_STATUS_CHANGED (touchexplorationstatuschanged)\r\n\r\nThe event fires when Touch Exploration has been enabled on an Android device.\r\nThe event returns an object, `info`, with the current status of accessibility features on the device.\r\nIf Touch Exploration is active, `info.isTouchExplorationEnabled` will equal `true`.\r\n\r\n```javascript\r\n    // Define a persistent callback method to handle the event\r\n    function onTouchExplorationChanged(info) {\r\n        if (info && typeof info.isTouchExplorationEnabled !== \"undefined\") {\r\n            if (info.isTouchExplorationEnabled) {\r\n                console.log(\"Touch Exploration: ON\");\r\n                // Do something to improve the behavior of the application while Touch Exploration is enabled.\r\n            } else {\r\n                console.log(\"Touch Exploration: OFF\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Register the callback method to handle the event\r\n    window.addEventListener(MobileAccessibilityNotifications.TOUCH_EXPLORATION_STATUS_CHANGED, onTouchExplorationChanged, false);\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phonegap/phonegap-mobile-accessibility.git"
  },
  "version": "1.0.5"
}
